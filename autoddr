#!/usr/bin/python3
# Utility script x3270 to dump all disks using z/VM RAMDISK
#
# -- Example config for hercules --
# [...]
# 0A99 3390 zos21/S1IMC1.64 ro cu=3990-6 # DUMP: S1IMC1
# 0A9A 3390 zos21/S1IMD1.64 ro cu=3990-6 # DUMP: S1IMD1
# 0A9B 3390 zos21/S1DIS1.64 ro cu=3990-6 # DUMP: S1DIS1
# [...]
# 0200 9336 zv2r1.hba
# -- End config --
#
# Execute as:
#  - c3270 -scriptport 4081 localhost:3270
#  - ./autoddr --volid ZV2R1 zvm.conf

import argparse
import os
import socket
import sys

parser = argparse.ArgumentParser()
parser.add_argument("hercules_config", help="Hercules configuration file to parse")
parser.add_argument("--volid", help="Volume ID to format the disk with")
parser.add_argument("--noformat", help="Do not format the disk", action="store_true")
parser.add_argument("--address", help="Address to the c3270/x3270 script port", default="127.0.0.1:4081")
args = parser.parse_args()

do_format = not args.noformat

if do_format and args.volid is None:
    print('Volid must be specified if formatting the disk')
    sys.exit(1)

if do_format and len(args.volid) > 6:
    print('Volid must be less than 7 characters')
    sys.exit(1)

mount = 'format 200 t (noerase' if do_format else 'access 200 t'

# Fetch disks from config file
dasds = []
for row in open(args.hercules_config):
    if 'DUMP: ' not in row:
        continue
    addr, _ = row.split(' ', maxsplit=1)
    _, name = row.strip().rsplit(' ', maxsplit=1)
    dasds.append((addr, name))

x3270input = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host, port = args.address.rsplit(':', maxsplit=1)
x3270input.connect((host, int(port)))

def script_print(*args):
    x3270input.send(bytes(' '.join(args) + '\n', 'utf-8'))

script_print('''
Ascii()

# Wait for boot
Wait(InputField)
Wait(3, Seconds)
Clear()
Snap(Wait,Output)
Clear()
Snap(Wait,Output)
Snap(Ascii)

# Init
Wait(InputField)
String("attach 200 *")
Enter()
Snap(Wait,Output)
Wait(InputField)
String("{mount}")
Enter()
Snap(Wait,Output)
Wait(InputField)
String("1")
Enter()
Snap(Wait,Output)
Wait(InputField)
String("{volid}")
Enter()
Snap(Wait,Output)

# Create DDR DUMP script
String("xedit dump ddr a")
Enter()
Snap(Wait,Output)
Wait(InputField)
String("i")
Enter()
Snap(Wait,Output)
Wait(InputField)
String("input 800 dasd")
Tab()
String("output pipe ( lz")
Tab()
String("prompts off")
Tab()
String("dump all")
Enter()
Enter()
Snap(Wait,Output)
Wait(InputField)
String("file")
Ascii()
Enter()
Snap(Wait,Output)

# Create DDR RESTORE script
String("erase restore ddr t")
Enter()
String("xedit restore ddr t")
Enter()
Snap(Wait,Output)
Wait(InputField)
String("i")
Enter()
Snap(Wait,Output)
Wait(InputField)
String("input pipe ( lz")
Tab()
String("output 800 dasd")
Tab()
String("prompts off")
Tab()
String("restore all")
Enter()
Enter()
Snap(Wait,Output)
Wait(InputField)
String("file")
Ascii()
Enter()
Snap(Wait,Output)

# Create LISTING script
String("xedit listing exec a")
Enter()
Snap(Wait,Output)
Wait(InputField)
String("i")
Enter()
Snap(Wait,Output)
String("/* REXX */")
Enter()
String("'ERASE DASD LIST T'")
Enter()
Ascii()
'''.format(volid=args.volid, mount=mount))

for addr, dasd in dasds:
    script_print('''# DASD {addr} {dasd}
String("'PIPE CP Q DASD DETAILS {addr} | LOCATE /VOLSER/ | >> DASD LIST T'")
Enter()
'''.format(addr=addr, dasd=dasd))

script_print('''
# Save script
Enter()
Snap(Wait,Output)
Wait(InputField)
String("file")
Ascii()
Enter()
Snap(Wait,Output)

# Create RESTORE script
String("xedit restore exec t")
Enter()
Snap(Wait,Output)
Wait(InputField)
String("i")
Enter()
Snap(Wait,Output)
String("/* REXX */")
Enter()
String("'DRPC MODULE'")
Enter()
Ascii()
''')

for addr, dasd in dasds:
    script_print('''# DASD {addr} {dasd}
String("'ATTACH {addr} * 800'")
Enter()
String("'PIPE < {addr} {dasd} T | DDR RESTORE DDR T'")
Enter()
String("'DETACH 800'")
Enter()
'''.format(addr=addr, dasd=dasd))

script_print('''
# Save script
Enter()
Snap(Wait,Output)
Wait(InputField)
String("file")
Ascii()
Enter()
Snap(Wait,Output)

# Create DUMP script
String("xedit dump exec a")
Enter()
Snap(Wait,Output)
Wait(InputField)
String("i")
Enter()
Snap(Wait,Output)
String("/* REXX */")
Enter()
String("'DRPC MODULE'")
Enter()
Ascii()
''')

for addr, dasd in dasds:
    script_print('''# DASD {addr} {dasd}
String("'ATTACH {addr} * 800'")
Enter()
String("'PIPE DDR DUMP DDR A | > {addr} {dasd} T'")
Enter()
String("'DETACH 800'")
Enter()
'''.format(addr=addr, dasd=dasd))

script_print('''
String("'SHUTDOWN SYSTEM IBMVMRAM'")
Enter()

# Save script
Enter()
Snap(Wait,Output)
Wait(InputField)
String("file")
Ascii()
Enter()
Snap(Wait,Output)

# Execute listing creator
Wait(InputField)
String("EXEC LISTING")
Enter()
Snap(Wait,Output)
Ascii()

# Execute dumper
Wait(InputField)
String("EXEC DUMP")
Enter()
Snap(Wait,Output)
Ascii()
''')
